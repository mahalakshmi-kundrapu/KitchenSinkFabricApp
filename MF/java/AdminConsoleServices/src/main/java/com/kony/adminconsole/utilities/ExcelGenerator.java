/**
 * 
 */
package com.kony.adminconsole.utilities;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.json.JSONArray;
import org.json.JSONObject;

import com.kony.adminconsole.dto.ExportColumnDetailsBean;

/**
 * @author Sowmya Mortha
 *
 */
public class ExcelGenerator {

    private static final Logger logger = Logger.getLogger(ExcelGenerator.class);
    private static final String DATE_FORMAT = "MM/dd/yy hh:mm a";
    private static final SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);

    public byte[] generateExcel(JSONArray dataArray, String title, String generatedBy, Integer offset,
            List<ExportColumnDetailsBean> fieldList, String filters) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        try {
            SXSSFWorkbook workbook = new SXSSFWorkbook();
            Sheet sheet = workbook.createSheet();
            Row row = null;
            Cell cell;
            // write generatedBy, generated on, and header names on worksheet
            commonDetails(sheet, title, generatedBy, offset, fieldList, filters);
            int rowIndex = 7;
            int columnIndex = 0;
            String cellValue = "";
            JSONObject rowData = null;
            if (dataArray != null) {
                for (int i = 0; i < dataArray.length(); i++) {
                    row = sheet.createRow(rowIndex);
                    rowData = dataArray.getJSONObject(i);
                    for (ExportColumnDetailsBean field : fieldList) {
                        if (StringUtils.isBlank(field.getDisplayName())) {
                            cellValue = cellValue.concat(rowData.optString(field.getParamName()) + " ");
                        } else {
                            cell = row.createCell(columnIndex);

                            if (field.getType().equalsIgnoreCase("date")) {
                                Long longdate = new Long(rowData.optString(field.getParamName()));
                                cellValue = cellValue.concat(changeDateByOffset(new Date(longdate), offset));
                            } else {
                                cellValue = cellValue.concat(rowData.optString(field.getParamName()));
                            }
                            cell.setCellValue(cellValue);
                            columnIndex++;
                            cellValue = "";
                        }
                    }
                    rowIndex++;
                    columnIndex = 0;
                }
            }
            if (row == null) {
                int rownum = sheet.getLastRowNum();
                row = sheet.getRow(rownum);
            }
            int cells = row.getLastCellNum();
            for (int i = 0; i < cells; i++) {
                sheet.autoSizeColumn(i);
            }
            workbook.write(bos);
            byte[] bytes = bos.toByteArray();
            return bytes;
        } catch (IOException ioe) {
            logger.error("Error in generating excel file ", ioe);
            throw ioe;
        } finally {
            bos.close();
        }
    }

    private void commonDetails(Sheet sheet, String title, String generatedBy, Integer offset,
            List<ExportColumnDetailsBean> fieldList, String filters) {

        CellStyle style = sheet.getWorkbook().createCellStyle();
        Font font = sheet.getWorkbook().createFont();
        font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);
        style.setFont(font);

        Row row = null;
        Cell cell = null;
        // Title
        row = sheet.createRow(0);
        cell = row.createCell(0);
        cell.setCellValue("Title");
        cell = row.createCell(1);
        cell.setCellValue(title);
        cell.setCellStyle(style);
        // Generated by
        row = sheet.createRow(1);
        cell = row.createCell(0);
        cell.setCellValue("Report generated by : ");
        cell = row.createCell(1);
        cell.setCellValue(generatedBy);
        // Generated on
        row = sheet.createRow(2);
        cell = row.createCell(0);
        cell.setCellValue("Report generated on : ");
        cell = row.createCell(1);
        cell.setCellValue(changeDateByOffset(offset));
        // any filter
        row = sheet.createRow(3);
        cell = row.createCell(0);
        cell.setCellValue("Filters applied : ");
        cell = row.createCell(1);
        cell.setCellValue(filters.trim().isEmpty() ? "N/A" : filters);
        // Header Row
        row = sheet.createRow(6);
        int colIndex = 0;
        for (ExportColumnDetailsBean field : fieldList) {
            if (StringUtils.isNotBlank(field.getDisplayName())) {
                cell = row.createCell(colIndex);
                cell.setCellValue(field.getDisplayName());
                cell.setCellStyle(style);
                colIndex++;
            }
        }
    }

    public static String changeDateByOffset(Integer offset) {
        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
        TimeZone timezone = TimeZone.getTimeZone("UTC");
        Calendar datetimeUTC = Calendar.getInstance();
        datetimeUTC.setTimeZone(timezone);

        Date localeDate = new Date(datetimeUTC.getTime().getTime() + ((-1) * offset * 60 * 1000));
        return dateFormat.format(localeDate);
    }

    private String changeDateByOffset(Date inputDate, Integer offset) {

        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
        TimeZone timezone = TimeZone.getTimeZone("UTC");
        Calendar datetimeUTC = Calendar.getInstance();
        datetimeUTC.setTimeZone(timezone);
        datetimeUTC.setTimeInMillis(inputDate.getTime());

        Date localeDate = new Date(datetimeUTC.getTime().getTime() + ((-1) * offset * 60 * 1000));
        return dateFormat.format(localeDate);
    }

}
