package com.kony.adminconsole.service.reports;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpStatus;
import org.apache.http.entity.BufferedHttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;

import com.kony.adminconsole.commons.utils.CommonUtilities;
import com.kony.adminconsole.commons.utils.FabricConstants;
import com.kony.adminconsole.core.security.LoggedInUserHandler;
import com.kony.adminconsole.core.security.UserDetailsBean;
import com.kony.adminconsole.dto.ExportColumnDetailsBean;
import com.kony.adminconsole.exception.ApplicationException;
import com.kony.adminconsole.utilities.ErrorCodeEnum;
import com.kony.adminconsole.utilities.ExcelGenerator;
import com.kony.adminconsole.utilities.Executor;
import com.kony.adminconsole.utilities.ServiceURLEnum;
import com.konylabs.middleware.common.JavaService2;
import com.konylabs.middleware.controller.DataControllerRequest;
import com.konylabs.middleware.controller.DataControllerResponse;
import com.konylabs.middleware.dataobject.Result;

public class ExportCustomerAuditLogs extends ExcelGenerator implements JavaService2 {

    private static final Logger LOG = Logger.getLogger(ExportCustomerAuditLogs.class);

    private static final String INPUT_PAGESIZE = "pageSize";
    private static final String INPUT_PAGEOFFSET = "pageOffset";

    @Override
    public Object invoke(String methodID, Object[] inputArray, DataControllerRequest requestInstance,
            DataControllerResponse responseInstance) throws Exception {
        Result result = new Result();
        try {
            String report_title = "";
            String file_name = "";
            if (methodID.equalsIgnoreCase("exportCustomerActivityLogs")) {
                report_title = "Customer Audit Logs";
                file_name = "CustomerAuditLogs";
            } else if (methodID.equalsIgnoreCase("exportTransactionalLogs")) {
                report_title = "Transactional Logs";
                file_name = "TransactionalLogs";
            }

            @SuppressWarnings("unchecked")
            Map<String, String> queryParamsMap = (Map<String, String>) requestInstance.getAttribute("queryparams");

            queryParamsMap.put(INPUT_PAGESIZE, "1000");
            queryParamsMap.put(INPUT_PAGEOFFSET, "0");

            String readTransactionLogsResponse = Executor.invokeService(ServiceURLEnum.SEARCHCUSTOMERAUDITLOGS_READ,
                    queryParamsMap, null, requestInstance);

            // fetch logs data
            JSONObject readResponse = CommonUtilities.getStringAsJSONObject(readTransactionLogsResponse);
            JSONArray logsArray = readResponse.optJSONArray("logs");

            // get reported generated by from login
            StringBuilder generatedBy = new StringBuilder();
            UserDetailsBean loggedInUserDetails = null;
            try {
                loggedInUserDetails = LoggedInUserHandler.getUserDetails(requestInstance);
            } catch (ApplicationException ae) {
                LOG.error("Exception while fetching logged-in user details");
            }
            if (loggedInUserDetails != null) {
                generatedBy.append(StringUtils.defaultString(loggedInUserDetails.getFirstName())).append(" ");
                generatedBy.append(StringUtils.defaultString(loggedInUserDetails.getMiddleName())).append(" ");
                generatedBy.append(StringUtils.defaultString(loggedInUserDetails.getLastName()));
            }
            Integer offset = queryParamsMap.containsKey("offset") ? Integer.parseInt(queryParamsMap.get("offset")) : 0;
            // get headers
            List<ExportColumnDetailsBean> fieldList = getHeaders();

            queryParamsMap.remove("authToken");
            // write to excel
            byte[] bytes = generateExcel(logsArray, report_title, generatedBy.toString(), offset, fieldList,
                    queryParamsMap.toString());
            Map<String, String> customHeaders = new HashMap<String, String>();
            customHeaders.put("Content-Type", "application/vnd.ms-excel");
            customHeaders.put("Content-Disposition", "attachment; filename=\"" + file_name + ".xlsx\"");
            responseInstance.setAttribute(FabricConstants.CHUNKED_RESULTS_IN_JSON,
                    new BufferedHttpEntity(new ByteArrayEntity(bytes)));
            responseInstance.setStatusCode(HttpStatus.SC_OK);
            responseInstance.getHeaders().putAll(customHeaders);
        } catch (Exception e) {
            LOG.error("Failed while exporting transaction logs", e);
            ErrorCodeEnum.ERR_20687.setErrorCode(result);

            String errorMessage = "Failed to export transaction logs. Please contact administrator.";
            CommonUtilities.fileDownloadFailure(responseInstance, errorMessage);
        }
        return result;
    }

    private List<ExportColumnDetailsBean> getHeaders() {
        List<ExportColumnDetailsBean> fieldList = new ArrayList<ExportColumnDetailsBean>();
        fieldList.add(new ExportColumnDetailsBean(0, "ID", "id"));
        fieldList.add(new ExportColumnDetailsBean(1, "EVENT ID", "eventId"));
        fieldList.add(new ExportColumnDetailsBean(2, "EVENT TYPE", "eventType"));
        fieldList.add(new ExportColumnDetailsBean(3, "EVENT SUB TYPE", "eventSubType"));
        fieldList.add(new ExportColumnDetailsBean(4, "STATUS ID", "status_Id"));
        fieldList.add(new ExportColumnDetailsBean(5, "SESSION ID", "sessionId"));
        fieldList.add(new ExportColumnDetailsBean(6, "APP ID", "appId"));
        fieldList.add(new ExportColumnDetailsBean(7, "USERNAME", "userName"));
        fieldList.add(new ExportColumnDetailsBean(8, "CUSTOMER ID", "customer_Id"));
        fieldList.add(new ExportColumnDetailsBean(9, "ISCSRASSIST", "isCSRAssist"));
        fieldList.add(new ExportColumnDetailsBean(10, "ADMIN USERNAME", "adminUserName"));
        fieldList.add(new ExportColumnDetailsBean(11, "ADMIN USER ROLE", "adminUserRole"));
        fieldList.add(new ExportColumnDetailsBean(13, "MONEY MOVEMENT REFID", "moneyMovementRefId"));
        fieldList.add(new ExportColumnDetailsBean(14, "MFA STATE", "mfa_State"));
        fieldList.add(new ExportColumnDetailsBean(15, "MFA SERVICEKEY", "mfa_ServiceKey"));
        fieldList.add(new ExportColumnDetailsBean(16, "MFA TYPE", "mfa_Type"));
        fieldList.add(new ExportColumnDetailsBean(17, "PHONE NUMBER", "phoneNumber"));
        fieldList.add(new ExportColumnDetailsBean(18, "EMAIL", "email"));
        fieldList.add(new ExportColumnDetailsBean(19, "DEVICE MODEL", "deviceModel"));
        fieldList.add(new ExportColumnDetailsBean(20, "OPERATING SYSTEM", "operatingSystem"));
        fieldList.add(new ExportColumnDetailsBean(21, "BROWSER", "browser"));
        fieldList.add(new ExportColumnDetailsBean(22, "DEVICE ID", "deviceId"));
        fieldList.add(new ExportColumnDetailsBean(23, "CHANNEL", "channel"));
        fieldList.add(new ExportColumnDetailsBean(24, "APP VERSION", "appVersion"));
        fieldList.add(new ExportColumnDetailsBean(25, "PLATFORM", "platform"));
        fieldList.add(new ExportColumnDetailsBean(26, "IP ADDRESS", "ipAddress"));
        fieldList.add(new ExportColumnDetailsBean(27, "EVENT TS", "eventts"));
        fieldList.add(new ExportColumnDetailsBean(29, "CREATED TS", "createdts"));
        fieldList.add(new ExportColumnDetailsBean(30, "ISSCHEDULED", "isScheduled"));
        fieldList.add(new ExportColumnDetailsBean(37, "FROM ACCOUNT NUMBER", "fromAccountNumber"));
        fieldList.add(new ExportColumnDetailsBean(39, "TO ACCOUNT NUMBER", "toAccountNumber"));
        fieldList.add(new ExportColumnDetailsBean(41, "AMOUNT", "amount"));
        fieldList.add(new ExportColumnDetailsBean(57, "FREQUENCY TYPE", "frequencyType"));
        fieldList.add(new ExportColumnDetailsBean(58, "NUMBER OF RECURRENCES", "numberOfRecurrences"));

        fieldList.sort(null);
        return fieldList;
    }

}