package com.kony.adminconsole.service.reports;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpStatus;
import org.apache.http.entity.BufferedHttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.json.JSONArray;
import org.json.JSONObject;

import com.kony.adminconsole.commons.utils.CommonUtilities;
import com.kony.adminconsole.commons.utils.FabricConstants;
import com.kony.adminconsole.core.security.LoggedInUserHandler;
import com.kony.adminconsole.core.security.UserDetailsBean;
import com.kony.adminconsole.utilities.ErrorCodeEnum;
import com.kony.adminconsole.utilities.Executor;
import com.kony.adminconsole.utilities.ServiceURLEnum;
import com.konylabs.middleware.common.JavaService2;
import com.konylabs.middleware.controller.DataControllerRequest;
import com.konylabs.middleware.controller.DataControllerResponse;
import com.konylabs.middleware.dataobject.Result;

public class ExportTransactionsReport implements JavaService2 {

    private static final Logger LOGGER = Logger.getLogger(ExportTransactionsReport.class);

    private static final String TITLE = "Transactions Report";
    private static final String DATE_FORMAT = "dd/MM/yyyy hh:mm:ss a";
    private static final String TOTAL = "TOTAL";
    private static final String VOLUME = "VOLUME";
    private static final String VALUE = "VALUE";
    private static final String ONLINE = "ONLINE";
    private static final String MOBILE = "MOBILE";
    private static final BigDecimal ZERO = BigDecimal.ZERO;

    @SuppressWarnings("unchecked")
    @Override
    public Object invoke(String methodID, Object[] inputArray, DataControllerRequest requestInstance,
            DataControllerResponse responseInstance) throws Exception {
        Result result = new Result();

        try {
            Map<String, String> queryParamsMap = (Map<String, String>) requestInstance.getAttribute("queryparams");
            CommonUtilities.getAuthToken(requestInstance);
            String filterCondition = null;

            Map<String, String> postParametersMap = new HashMap<String, String>();

            String stDate = queryParamsMap.containsKey("startDate") ? queryParamsMap.get("startDate") : "";
            String endDate = queryParamsMap.containsKey("endDate") ? queryParamsMap.get("endDate") : "";
            postParametersMap.put("startDate", stDate);
            postParametersMap.put("endDate", endDate);
            if (StringUtils.isNotBlank(stDate) && StringUtils.isNotBlank(endDate)) {
                filterCondition = "Date between " + stDate + "-" + endDate;
            }

            // fetch logs data
            String readTransactionReportsResponse = Executor.invokeService(ServiceURLEnum.TRANSACTIONREPORTS_READ,
                    postParametersMap, null, requestInstance);
            JSONObject readResponse = CommonUtilities.getStringAsJSONObject(readTransactionReportsResponse);

            // get reported generated by from login
            StringBuilder generatedBy = new StringBuilder();
            UserDetailsBean loggedInUserDetails = LoggedInUserHandler.getUserDetails(requestInstance);
            if (loggedInUserDetails != null) {
                generatedBy.append(StringUtils.defaultString(loggedInUserDetails.getFirstName())).append(" ");
                generatedBy.append(StringUtils.defaultString(loggedInUserDetails.getMiddleName())).append(" ");
                generatedBy.append(StringUtils.defaultString(loggedInUserDetails.getLastName()));
            }

            // write to excel
            byte[] bytes = generateExcel(readResponse, generatedBy.toString(), filterCondition);
            Map<String, String> customHeaders = new HashMap<String, String>();
            customHeaders.put("Content-Type", "application/vnd.ms-excel");
            customHeaders.put("Content-Disposition", "attachment; filename=\"Transactions Report.xlsx\"");
            responseInstance.setAttribute(FabricConstants.CHUNKED_RESULTS_IN_JSON,
                    new BufferedHttpEntity(new ByteArrayEntity(bytes)));
            responseInstance.setStatusCode(HttpStatus.SC_OK);
            responseInstance.getHeaders().putAll(customHeaders);
        } catch (Exception e) {
            LOGGER.error("Failed while generating excel file for transaction reports", e);
            ErrorCodeEnum.ERR_20687.setErrorCode(result);

            String errorMessage =
                    "Failed to generate excel file for transaction reports. Please contact administrator.";
            CommonUtilities.fileDownloadFailure(responseInstance, errorMessage);
        }

        return result;
    }

    private byte[] generateExcel(JSONObject readResponse, String generatedBy, String filterCondition)
            throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        try {
            SXSSFWorkbook workbook = new SXSSFWorkbook();
            Sheet sheet = workbook.createSheet();
            Row row = null;
            CellStyle style = sheet.getWorkbook().createCellStyle();
            Font font = sheet.getWorkbook().createFont();
            font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);
            style.setFont(font);
            // write generatedBy, generated on, and header names on worksheet
            commonDetails(sheet, generatedBy, filterCondition, style);
            int rowIndex = 6;
            JSONObject rowData = null;
            String serviceName = "";
            String mobileValue = "";
            String mobileVolume = "";
            String onlineValue = "";
            String onlineVolume = "";
            String channel = "";
            if (readResponse != null) {

                JSONArray data = readResponse.optJSONArray("records");

                for (int i = 0; i < data.length(); i++) {
                    rowData = data.getJSONObject(i);
                    channel = rowData.optString("channel");
                    String rowServiceName = rowData.optString("serviceName");
                    if (i == 0) {
                        serviceName = rowServiceName;
                    }
                    if (!serviceName.equalsIgnoreCase(rowServiceName) && i != 0) {
                        constructServiceReport(sheet, rowIndex, serviceName, mobileValue, onlineValue, mobileVolume,
                                onlineVolume, style);
                        rowIndex = rowIndex + 4;
                        serviceName = rowServiceName;
                        mobileValue = "";
                        mobileVolume = "";
                        onlineValue = "";
                        onlineVolume = "";
                    }
                    if (i == data.length() - 1) {
                        if (channel.toUpperCase().indexOf(MOBILE) != -1) {
                            mobileValue = rowData.optString("value");
                            mobileVolume = rowData.optString("volume");
                        } else if (channel.toUpperCase().indexOf(ONLINE) != -1) {
                            onlineValue = rowData.optString("value");
                            onlineVolume = rowData.optString("volume");
                        }
                        constructServiceReport(sheet, rowIndex, rowServiceName, mobileValue, onlineValue, mobileVolume,
                                onlineVolume, style);
                        rowIndex = rowIndex + 4;
                        mobileValue = "";
                        mobileVolume = "";
                        onlineValue = "";
                        onlineVolume = "";
                    }
                    if (channel.toUpperCase().indexOf(MOBILE) != -1) {
                        mobileValue = rowData.optString("value");
                        mobileVolume = rowData.optString("volume");
                    } else if (channel.toUpperCase().indexOf(ONLINE) != -1) {
                        onlineValue = rowData.optString("value");
                        onlineVolume = rowData.optString("volume");
                    }
                }

            }
            if (row == null) {
                int rownum = sheet.getLastRowNum();
                row = sheet.getRow(rownum);
            }
            int cells = row.getLastCellNum();
            for (int i = 0; i < cells; i++) {
                sheet.autoSizeColumn(i);
            }
            workbook.write(bos);
            byte[] bytes = bos.toByteArray();
            return bytes;
        } catch (Exception ioe) {
            LOGGER.error("Error in generating excel file for transaction reports ", ioe);
            throw ioe;
        } finally {
            bos.close();
        }
    }

    private void constructServiceReport(Sheet sheet, int rowIndex, String serviceName, String mobileValue,
            String onlineValue, String mobileVolume, String onlineVolume, CellStyle style) {
        Row headerRow = sheet.createRow(rowIndex);
        rowIndex++;
        Row valueRow = sheet.createRow(rowIndex);
        rowIndex++;
        Row volumeRow = sheet.createRow(rowIndex);

        constructHeaderRow(headerRow, serviceName, style);
        constructValueRow(valueRow, mobileValue, onlineValue);
        constructVolumeRow(volumeRow, mobileVolume, onlineVolume);

    }

    private void constructVolumeRow(Row volumeRow, String mobileVolume, String onlineVolume) {
        Cell cell = volumeRow.createCell(0);
        cell.setCellValue(VOLUME);

        BigDecimal mblVolume = mobileVolume.isEmpty() ? ZERO : new BigDecimal(mobileVolume);
        BigDecimal onlVolume = onlineVolume.isEmpty() ? ZERO : new BigDecimal(onlineVolume);
        BigDecimal total = mblVolume.add(onlVolume);

        cell = volumeRow.createCell(1);
        cell.setCellValue("# " + (mblVolume.compareTo(ZERO) == 0 ? ZERO : mblVolume));

        cell = volumeRow.createCell(2);
        cell.setCellValue("# " + (onlVolume.compareTo(ZERO) == 0 ? ZERO : onlVolume));

        cell = volumeRow.createCell(3);
        cell.setCellValue("# " + total);

    }

    private void constructValueRow(Row valueRow, String mobileValue, String onlineValue) {
        Cell cell = valueRow.createCell(0);
        cell.setCellValue(VALUE);

        BigDecimal mblValue = mobileValue.isEmpty() ? ZERO : new BigDecimal(mobileValue);
        BigDecimal onlValue = onlineValue.isEmpty() ? ZERO : new BigDecimal(onlineValue);
        BigDecimal total = mblValue.add(onlValue);

        cell = valueRow.createCell(1);
        cell.setCellValue("$ " + (mblValue.compareTo(ZERO) == 0 ? ZERO : mblValue));

        cell = valueRow.createCell(2);
        cell.setCellValue("$ " + (onlValue.compareTo(ZERO) == 0 ? ZERO : onlValue));

        cell = valueRow.createCell(3);
        cell.setCellValue("$ " + total);
    }

    private void constructHeaderRow(Row headerRow, String rowServiceName, CellStyle style) {
        Cell cell = headerRow.createCell(0);
        cell.setCellValue(rowServiceName);
        cell.setCellStyle(style);

        cell = headerRow.createCell(1);
        cell.setCellValue(MOBILE);
        cell.setCellStyle(style);

        cell = headerRow.createCell(2);
        cell.setCellValue(ONLINE);
        cell.setCellStyle(style);

        cell = headerRow.createCell(3);
        cell.setCellValue(TOTAL);
        cell.setCellStyle(style);
    }

    private void commonDetails(Sheet sheet, String generatedBy, String filters, CellStyle style) {
        SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);

        Row row = null;
        Cell cell = null;
        // Title
        row = sheet.createRow(0);
        cell = row.createCell(0);
        cell.setCellValue("Title");
        cell = row.createCell(1);
        cell.setCellValue(TITLE);
        cell.setCellStyle(style);
        // Generated by
        row = sheet.createRow(1);
        cell = row.createCell(0);
        cell.setCellValue("Report generated by : ");
        cell = row.createCell(1);
        cell.setCellValue(generatedBy);
        // Generated on
        row = sheet.createRow(2);
        cell = row.createCell(0);
        cell.setCellValue("Report generated on : ");
        cell = row.createCell(1);
        cell.setCellValue(dateFormat.format(new Date()));
        // any filter
        row = sheet.createRow(3);
        cell = row.createCell(0);
        cell.setCellValue("Filters applied : ");
        cell = row.createCell(1);
        cell.setCellValue(filters == null ? "N/A" : filters);
    }

}