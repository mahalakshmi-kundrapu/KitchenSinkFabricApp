package com.kony.adminconsole.service.reports;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpStatus;
import org.apache.http.entity.BufferedHttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.json.JSONArray;
import org.json.JSONObject;

import com.kony.adminconsole.commons.utils.CommonUtilities;
import com.kony.adminconsole.commons.utils.FabricConstants;
import com.kony.adminconsole.core.security.LoggedInUserHandler;
import com.kony.adminconsole.core.security.UserDetailsBean;
import com.kony.adminconsole.utilities.ErrorCodeEnum;
import com.kony.adminconsole.utilities.ExcelGenerator;
import com.kony.adminconsole.utilities.Executor;
import com.kony.adminconsole.utilities.ServiceURLEnum;
import com.konylabs.middleware.common.JavaService2;
import com.konylabs.middleware.controller.DataControllerRequest;
import com.konylabs.middleware.controller.DataControllerResponse;
import com.konylabs.middleware.dataobject.Result;

public class ExportMessageReports implements JavaService2 {

    private static final Logger LOGGER = Logger.getLogger(ExportMessageReports.class);

    private static final String TITLE = "Messages Report";

    @SuppressWarnings("unchecked")
    @Override
    public Object invoke(String methodID, Object[] inputArray, DataControllerRequest requestInstance,
            DataControllerResponse responseInstance) throws Exception {
        Result result = new Result();

        try {
            Map<String, String> queryParamsMap = (Map<String, String>) requestInstance.getAttribute("queryparams");
            CommonUtilities.getAuthToken(requestInstance);
            StringBuilder filterCondition = new StringBuilder();

            Map<String, String> postParametersMap = new HashMap<String, String>();

            if (queryParamsMap.containsKey("startDate") && queryParamsMap.containsKey("endDate")) {
                String stDate = queryParamsMap.get("startDate");
                String endDate = queryParamsMap.get("endDate");
                postParametersMap.put("startDate", stDate.concat("00:00:00"));
                postParametersMap.put("endDate", endDate.concat("23:59:59"));
                filterCondition.append("Date between ").append(stDate).append("-").append(endDate).append(" AND ");
            }
            if (queryParamsMap.containsKey("categoryId")) {
                String category = queryParamsMap.get("categoryId");
                String categoryName = queryParamsMap.get("categoryName");
                postParametersMap.put("category", category);
                if (!category.equals("Select category")) {
                    filterCondition.append("Category EQUALS ").append(categoryName).append(" AND ");
                }
            }
            if (queryParamsMap.containsKey("csrName")) {
                String csrid = queryParamsMap.get("csrid");
                String csrName = queryParamsMap.get("csrName");
                postParametersMap.put("csrName", csrid);
                filterCondition.append("CSR EQUALS ").append(csrName).append(" AND ");
            }
            if (filterCondition.length() > 0) {
                filterCondition.delete(filterCondition.lastIndexOf("AND"), filterCondition.length());
            }
            Integer offset = queryParamsMap.containsKey("offset") ? Integer.parseInt(queryParamsMap.get("offset")) : 0;
            // fetch logs data
            String readMessageReportsResponse = Executor.invokeService(ServiceURLEnum.MESSAGEREPORTS_READ,
                    postParametersMap, null, requestInstance);
            JSONObject readResponse = CommonUtilities.getStringAsJSONObject(readMessageReportsResponse);
            JSONArray msgsArray = readResponse.optJSONArray("messages");
            JSONArray threadsArray = readResponse.optJSONArray("threads");

            // get reported generated by from login
            StringBuilder generatedBy = new StringBuilder();
            try {
                UserDetailsBean loggedInUserDetails = LoggedInUserHandler.getUserDetails(requestInstance);
                if (loggedInUserDetails != null) {
                    generatedBy.append(StringUtils.defaultString(loggedInUserDetails.getFirstName())).append(" ");
                    generatedBy.append(StringUtils.defaultString(loggedInUserDetails.getMiddleName())).append(" ");
                    generatedBy.append(StringUtils.defaultString(loggedInUserDetails.getLastName()));
                }
            } catch (Exception e) {
                LOGGER.error("Error in Fetching User details", e);
            }

            LOGGER.error("readMessageReportsResponse" + readMessageReportsResponse);

            // write to excel
            byte[] bytes = generateExcel(msgsArray, threadsArray, generatedBy.toString(), offset,
                    filterCondition.toString());
            Map<String, String> customHeaders = new HashMap<String, String>();
            customHeaders.put("Content-Type", "application/vnd.ms-excel");
            customHeaders.put("Content-Disposition", "attachment; filename=\"Messages Report.xlsx\"");
            responseInstance.setAttribute(FabricConstants.CHUNKED_RESULTS_IN_JSON,
                    new BufferedHttpEntity(new ByteArrayEntity(bytes)));
            responseInstance.setStatusCode(HttpStatus.SC_OK);
            responseInstance.getHeaders().putAll(customHeaders);
        } catch (Exception e) {
            LOGGER.error("Error in generating excel file for message reports", e);
            ErrorCodeEnum.ERR_20687.setErrorCode(result);

            String errorMessage = "Failed to generate excel file for message reports. Please contact administrator.";
            CommonUtilities.fileDownloadFailure(responseInstance, errorMessage);
        }

        return result;
    }

    private byte[] generateExcel(JSONArray msgsArray, JSONArray threadsArray, String generatedBy, Integer offset,
            String filterCondition) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        try {
            SXSSFWorkbook workbook = new SXSSFWorkbook();
            Sheet sheet = workbook.createSheet();
            Row row = null;
            Cell cell = null;
            // style
            CellStyle style = sheet.getWorkbook().createCellStyle();
            Font font = sheet.getWorkbook().createFont();
            font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);
            style.setFont(font);
            // write generatedBy, generated on, and header names on worksheet
            commonDetails(sheet, generatedBy, offset, filterCondition, style);
            int rowIndex = 6;
            constructHeaderRow(sheet, rowIndex++, style);
            int i = 0;
            while (i < msgsArray.length() || i < threadsArray.length()) {

                JSONObject msgObj = i < msgsArray.length() ? msgsArray.getJSONObject(i) : null;
                JSONObject threadObj = i < threadsArray.length() ? threadsArray.getJSONObject(i) : null;

                row = sheet.createRow(rowIndex);
                cell = row.createCell(0);
                cell.setCellValue(msgObj == null ? "" : msgObj.optString("name"));
                cell = row.createCell(1);
                cell.setCellValue(msgObj == null ? "" : msgObj.optString("value"));

                cell = row.createCell(3);
                cell.setCellValue(threadObj == null ? "" : threadObj.optString("name"));
                cell = row.createCell(4);
                cell.setCellValue(threadObj == null ? "" : threadObj.optString("value"));

                i++;
                rowIndex++;
            }
            if (row == null) {
                int rownum = sheet.getLastRowNum();
                row = sheet.getRow(rownum);
            }
            int cells = row.getLastCellNum();
            for (int cellNum = 0; cellNum < cells; cellNum++) {
                sheet.autoSizeColumn(cellNum);
            }
            workbook.write(bos);
            byte[] bytes = bos.toByteArray();
            return bytes;
        } catch (IOException ioe) {
            LOGGER.error("Error in generating excel file for message reports ", ioe);
            throw ioe;
        } finally {
            bos.close();
        }
    }

    private void constructHeaderRow(Sheet sheet, int i, CellStyle style) {

        Row row = sheet.createRow(i);
        Cell cell = null;
        cell = row.createCell(0);
        cell.setCellValue("MESSAGES");
        cell.setCellStyle(style);
        cell = row.createCell(1);
        cell.setCellValue("VALUE");
        cell.setCellStyle(style);

        cell = row.createCell(3);
        cell.setCellValue("THREADS");
        cell.setCellStyle(style);
        cell = row.createCell(4);
        cell.setCellValue("VALUE");
        cell.setCellStyle(style);

    }

    private void commonDetails(Sheet sheet, String generatedBy, Integer offset, String filters, CellStyle style) {
        Row row = null;
        Cell cell = null;
        // Title
        row = sheet.createRow(0);
        cell = row.createCell(0);
        cell.setCellValue("Title");
        cell = row.createCell(1);
        cell.setCellValue(TITLE);
        cell.setCellStyle(style);
        // Generated by
        row = sheet.createRow(1);
        cell = row.createCell(0);
        cell.setCellValue("Report generated by : ");
        cell = row.createCell(1);
        cell.setCellValue(generatedBy);
        // Generated on
        row = sheet.createRow(2);
        cell = row.createCell(0);
        cell.setCellValue("Report generated on : ");
        cell = row.createCell(1);
        cell.setCellValue(ExcelGenerator.changeDateByOffset(offset));
        // any filter
        row = sheet.createRow(3);
        cell = row.createCell(0);
        cell.setCellValue("Filters applied : ");
        cell = row.createCell(1);
        cell.setCellValue((filters == null || filters.isEmpty()) ? "N/A" : filters);
    }
}