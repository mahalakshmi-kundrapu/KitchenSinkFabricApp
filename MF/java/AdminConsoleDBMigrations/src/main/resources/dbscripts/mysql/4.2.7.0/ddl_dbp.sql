ALTER TABLE `accounts` 
ADD COLUMN `isBusinessAccount` TINYINT(1) NOT NULL DEFAULT 0 AFTER `Name`;

DROP VIEW IF EXISTS `getaccountsview`;
CREATE VIEW `getaccountsview` AS select `accounts`.`Account_id` AS `Account_id`,`accounts`.`Type_id` AS `Type_id`,`accounts`.`UserName` AS `userName`,`accounts`.`CurrencyCode` AS `currencyCode`,`accounts`.`AccountHolder` AS `accountHolder`,`accounts`.`isBusinessAccount` AS `isBusinessAccount`,`accounts`.`error` AS `error`,`accounts`.`Address` AS `Address`,`accounts`.`Scheme` AS `Scheme`,`accounts`.`Number` AS `number`,`accounts`.`AvailableBalance` AS `availableBalance`,`accounts`.`CurrentBalance` AS `currentBalance`,`accounts`.`InterestRate` AS `interestRate`,`accounts`.`AvailableCredit` AS `availableCredit`,`accounts`.`MinimumDue` AS `minimumDue`,`accounts`.`DueDate` AS `dueDate`,`accounts`.`FirstPaymentDate` AS `firstPaymentDate`,`accounts`.`ClosingDate` AS `closingDate`,`accounts`.`PaymentTerm` AS `paymentTerm`,`accounts`.`OpeningDate` AS `openingDate`,`accounts`.`MaturityDate` AS `maturityDate`,`accounts`.`DividendLastPaidAmount` AS `dividendLastPaidAmount`,`accounts`.`DividendLastPaidDate` AS `dividendLastPaidDate`,`accounts`.`DividendPaidYTD` AS `dividendPaidYTD`,`accounts`.`DividendRate` AS `dividendRate`,`accounts`.`DividendYTD` AS `dividendYTD`,`accounts`.`EStatementmentEnable` AS `eStatementEnable`,`accounts`.`FavouriteStatus` AS `favouriteStatus`,`accounts`.`StatusDesc` AS `statusDesc`,`accounts`.`NickName` AS `nickName`,`accounts`.`User_id` AS `User_id`,`accounts`.`OriginalAmount` AS `originalAmount`,`accounts`.`OutstandingBalance` AS `outstandingBalance`,`accounts`.`PaymentDue` AS `paymentDue`,`accounts`.`PaymentMethod` AS `paymentMethod`,`accounts`.`SwiftCode` AS `swiftCode`,`accounts`.`TotalCreditMonths` AS `totalCreditMonths`,`accounts`.`TotalDebitsMonth` AS `totalDebitsMonth`,`accounts`.`RoutingNumber` AS `routingNumber`,`accounts`.`SupportBillPay` AS `supportBillPay`,`accounts`.`SupportCardlessCash` AS `supportCardlessCash`,`accounts`.`SupportTransferFrom` AS `supportTransferFrom`,`accounts`.`SupportTransferTo` AS `supportTransferTo`,`accounts`.`SupportDeposit` AS `supportDeposit`,`accounts`.`UnpaidInterest` AS `unpaidInterest`,`accounts`.`PreviousYearsDividends` AS `previousYearsDividends`,`accounts`.`principalBalance` AS `principalBalance`,`accounts`.`PrincipalValue` AS `principalValue`,`accounts`.`RegularPaymentAmount` AS `regularPaymentAmount`,`accounts`.`phone` AS `phoneId`,`accounts`.`LastDividendPaidDate` AS `lastDividendPaidDate`,`accounts`.`LastDividendPaidAmount` AS `lastDividendPaidAmount`,`accounts`.`LastPaymentAmount` AS `lastPaymentAmount`,`accounts`.`LastPaymentDate` AS `lastPaymentDate`,`accounts`.`LastStatementBalance` AS `lastStatementBalance`,`accounts`.`LateFeesDue` AS `lateFeesDue`,`accounts`.`maturityAmount` AS `maturityAmount`,`accounts`.`MaturityOption` AS `maturityOption`,`accounts`.`payoffAmount` AS `payoffAmount`,`accounts`.`PayOffCharge` AS `payOffCharge`,`accounts`.`PendingDeposit` AS `pendingDeposit`,`accounts`.`PendingWithdrawal` AS `pendingWithdrawal`,`accounts`.`JointHolders` AS `jointHolders`,`accounts`.`IsPFM` AS `isPFM`,`accounts`.`InterestPaidYTD` AS `interestPaidYTD`,`accounts`.`InterestPaidPreviousYTD` AS `interestPaidPreviousYTD`,`accounts`.`InterestPaidLastYear` AS `interestPaidLastYear`,`accounts`.`InterestEarned` AS `interestEarned`,`accounts`.`CurrentAmountDue` AS `currentAmountDue`,`accounts`.`CreditLimit` AS `creditLimit`,`accounts`.`CreditCardNumber` AS `creditCardNumber`,`accounts`.`BsbNum` AS `bsbNum`,`accounts`.`BondInterestLastYear` AS `bondInterestLastYear`,`accounts`.`BondInterest` AS `bondInterest`,`accounts`.`AvailablePoints` AS `availablePoints`,`accounts`.`AccountName` AS `accountName`,`accounts`.`email` AS `email`,`accounts`.`IBAN` AS `IBAN`,`accounts`.`adminProductId` AS `adminProductId`,`bank`.`Description` AS `bankname`,`accounts`.`AccountPreference` AS `accountPreference`,`accounttype`.`transactionLimit` AS `transactionLimit`,`accounttype`.`transferLimit` AS `transferLimit`,`accounttype`.`rates` AS `rates`,`accounttype`.`termsAndConditions` AS `termsAndConditions`,`accounttype`.`TypeDescription` AS `typeDescription`,`accounttype`.`supportChecks` AS `supportChecks`,`accounttype`.`displayName` AS `displayName`,`accounts`.`accountSubType` AS `accountSubType`,`accounts`.`description` AS `description`,`accounts`.`schemeName` AS `schemeName`,`accounts`.`identification` AS `identification`,`accounts`.`secondaryIdentification` AS `secondaryIdentification`,`accounts`.`servicerSchemeName` AS `servicerSchemeName`,`accounts`.`servicerIdentification` AS `servicerIdentification`,`accounts`.`dataCreditDebitIndicator` AS `dataCreditDebitIndicator`,`accounts`.`dataType` AS `dataType`,`accounts`.`dataDateTime` AS `dataDateTime`,`accounts`.`dataCreditLineIncluded` AS `dataCreditLineIncluded`,`accounts`.`dataCreditLineType` AS `dataCreditLineType`,`accounts`.`dataCreditLineAmount` AS `dataCreditLineAmount`,`accounts`.`dataCreditLineCurrency` AS `dataCreditLineCurrency`,`accounts`.`UpdatedBy` AS `UpdatedBy`,`accounts`.`LastUpdated` AS `LastUpdated`,`accounts`.`ActualUpdatedBY` AS `ActualUpdatedBY` from ((`accounts` join `accounttype`) join `bank`) where ((`accounts`.`Type_id` = `accounttype`.`TypeID`) and (`accounts`.`Bank_id` = `bank`.`id`));

DROP VIEW IF EXISTS `customeraccountsview`;
CREATE VIEW `customeraccountsview` AS select distinct `membershipaccounts`.`Membership_id` AS `Membership_id`,`membershipaccounts`.`Taxid` AS `Taxid`,`customeraccounts`.`Customer_id` AS `Customer_id`,`customeraccounts`.`Customer_id` AS `User_id`,`accounts`.`Account_id` AS `Account_id`,`accounts`.`isBusinessAccount` AS `isBusinessAccount`,`accounts`.`Type_id` AS `Type_id`,`accounts`.`UserName` AS `userName`,`accounts`.`CurrencyCode` AS `currencyCode`,`accounts`.`AccountHolder` AS `accountHolder`,`accounts`.`error` AS `error`,`accounts`.`Address` AS `Address`,`accounts`.`Scheme` AS `Scheme`,`accounts`.`Number` AS `number`,`accounts`.`AvailableBalance` AS `availableBalance`,`accounts`.`CurrentBalance` AS `currentBalance`,`accounts`.`InterestRate` AS `interestRate`,`accounts`.`AvailableCredit` AS `availableCredit`,`accounts`.`MinimumDue` AS `minimumDue`,`accounts`.`DueDate` AS `dueDate`,`accounts`.`FirstPaymentDate` AS `firstPaymentDate`,`accounts`.`ClosingDate` AS `closingDate`,`accounts`.`PaymentTerm` AS `paymentTerm`,`accounts`.`OpeningDate` AS `openingDate`,`accounts`.`MaturityDate` AS `maturityDate`,`accounts`.`DividendLastPaidAmount` AS `dividendLastPaidAmount`,`accounts`.`DividendLastPaidDate` AS `dividendLastPaidDate`,`accounts`.`DividendPaidYTD` AS `dividendPaidYTD`,`accounts`.`DividendRate` AS `dividendRate`,`accounts`.`DividendYTD` AS `dividendYTD`,`accounts`.`EStatementmentEnable` AS `eStatementEnable`,`customeraccounts`.`FavouriteStatus` AS `favouriteStatus`,`accounts`.`StatusDesc` AS `statusDesc`,`accounts`.`NickName` AS `nickName`,`accounts`.`OriginalAmount` AS `originalAmount`,`accounts`.`OutstandingBalance` AS `outstandingBalance`,`accounts`.`PaymentDue` AS `paymentDue`,`accounts`.`PaymentMethod` AS `paymentMethod`,`accounts`.`SwiftCode` AS `swiftCode`,`accounts`.`TotalCreditMonths` AS `totalCreditMonths`,`accounts`.`TotalDebitsMonth` AS `totalDebitsMonth`,`accounts`.`RoutingNumber` AS `routingNumber`,`accounts`.`SupportBillPay` AS `supportBillPay`,`accounts`.`SupportCardlessCash` AS `supportCardlessCash`,`accounts`.`SupportTransferFrom` AS `supportTransferFrom`,`accounts`.`SupportTransferTo` AS `supportTransferTo`,`accounts`.`SupportDeposit` AS `supportDeposit`,`accounts`.`UnpaidInterest` AS `unpaidInterest`,`accounts`.`PreviousYearsDividends` AS `previousYearsDividends`,`accounts`.`principalBalance` AS `principalBalance`,`accounts`.`PrincipalValue` AS `principalValue`,`accounts`.`RegularPaymentAmount` AS `regularPaymentAmount`,`accounts`.`phone` AS `phoneId`,`accounts`.`LastDividendPaidDate` AS `lastDividendPaidDate`,`accounts`.`LastDividendPaidAmount` AS `lastDividendPaidAmount`,`accounts`.`LastPaymentAmount` AS `lastPaymentAmount`,`accounts`.`LastPaymentDate` AS `lastPaymentDate`,`accounts`.`LastStatementBalance` AS `lastStatementBalance`,`accounts`.`LateFeesDue` AS `lateFeesDue`,`accounts`.`maturityAmount` AS `maturityAmount`,`accounts`.`MaturityOption` AS `maturityOption`,`accounts`.`payoffAmount` AS `payoffAmount`,`accounts`.`PayOffCharge` AS `payOffCharge`,`accounts`.`PendingDeposit` AS `pendingDeposit`,`accounts`.`PendingWithdrawal` AS `pendingWithdrawal`,`accounts`.`JointHolders` AS `jointHolders`,`accounts`.`IsPFM` AS `isPFM`,`accounts`.`InterestPaidYTD` AS `interestPaidYTD`,`accounts`.`InterestPaidPreviousYTD` AS `interestPaidPreviousYTD`,`accounts`.`InterestPaidLastYear` AS `interestPaidLastYear`,`accounts`.`InterestEarned` AS `interestEarned`,`accounts`.`CurrentAmountDue` AS `currentAmountDue`,`accounts`.`CreditLimit` AS `creditLimit`,`accounts`.`CreditCardNumber` AS `creditCardNumber`,`accounts`.`BsbNum` AS `bsbNum`,`accounts`.`BondInterestLastYear` AS `bondInterestLastYear`,`accounts`.`BondInterest` AS `bondInterest`,`accounts`.`AvailablePoints` AS `availablePoints`,`accounts`.`AccountName` AS `accountName`,`accounts`.`email` AS `email`,`accounts`.`IBAN` AS `IBAN`,`accounts`.`adminProductId` AS `adminProductId`,`accounts`.`UpdatedBy` AS `UpdatedBy`,`accounts`.`LastUpdated` AS `LastUpdated`,`accounts`.`ActualUpdatedBY` AS `ActualUpdatedBY`,`bank`.`Description` AS `bankname`,`accounts`.`AccountPreference` AS `accountPreference`,`accounttype`.`transactionLimit` AS `transactionLimit`,`accounttype`.`transferLimit` AS `transferLimit`,`accounttype`.`rates` AS `rates`,`accounttype`.`termsAndConditions` AS `termsAndConditions`,`accounttype`.`TypeDescription` AS `typeDescription`,`accounttype`.`supportChecks` AS `supportChecks`,`accounttype`.`displayName` AS `displayName`,`accounts`.`accountSubType` AS `accountSubType`,`accounts`.`description` AS `description`,`accounts`.`schemeName` AS `schemeName`,`accounts`.`identification` AS `identification`,`accounts`.`secondaryIdentification` AS `secondaryIdentification`,`accounts`.`servicerSchemeName` AS `servicerSchemeName`,`accounts`.`servicerIdentification` AS `servicerIdentification`,`accounts`.`dataCreditDebitIndicator` AS `dataCreditDebitIndicator`,`accounts`.`dataType` AS `dataType`,`accounts`.`dataDateTime` AS `dataDateTime`,`accounts`.`dataCreditLineIncluded` AS `dataCreditLineIncluded`,`accounts`.`dataCreditLineType` AS `dataCreditLineType`,`accounts`.`dataCreditLineAmount` AS `dataCreditLineAmount`,`accounts`.`dataCreditLineCurrency` AS `dataCreditLineCurrency` from ((((`accounts` join `customeraccounts`) join `accounttype`) left join `membershipaccounts` on((`accounts`.`Account_id` = `membershipaccounts`.`Account_id`))) left join `bank` on((`accounts`.`Bank_id` = `bank`.`id`))) where ((`accounts`.`Account_id` = `customeraccounts`.`Account_id`) and (`accounts`.`Type_id` = `accounttype`.`TypeID`));

DROP PROCEDURE IF EXISTS `customer_actions_proc`;
DELIMITER $$
CREATE PROCEDURE `customer_actions_proc`(
in _customerId varchar(50) CHARACTER SET UTF8 COLLATE utf8_general_ci
)
BEGIN

SET @organization_actions = (SELECT group_concat(Action_id SEPARATOR "','") from organisationactionlimit where Organisation_id = (SELECT Organization_Id from customer where id=_customerId));
SET @organization_actions = concat("'", IF(@organization_actions is null, '', @organization_actions), "'");

set @select_statement = concat("SELECT 
        `customeraction`.`Customer_id` AS `Customer_id`,
        `customeraction`.`Account_id` AS `Account_id`,
        IF(`customeraction`.`isAllowed` = '1', 'true', 'false') AS `isAllowed`,
        `featureaction`.`id` AS `Action_id`,
        IF(`featureaction`.`isAccountLevel` = '1', 'true', 'false') AS `isAccountLevel`,
        `feature`.`Status_id` AS `Feature_Status_id`,
        `feature`.`id` AS `Feature_id`,
        `customeraction`.`RoleType_id` AS `RoleType_id`
    FROM
        (`customeraction`
		LEFT JOIN `featureaction` ON (`featureaction`.`id` = `customeraction`.`Action_id`)
		LEFT JOIN `feature` ON (`feature`.`id` = `featureaction`.`Feature_id`))
	where `customeraction`.`Customer_id` = ", quote(_customerId)," and `feature`.`Status_id` = 'SID_FEATURE_ACTIVE'
    UNION SELECT 
        `customergroup`.`Customer_id` AS `Customer_id`,
        NULL AS `Account_id`,
        IF(`membergroup`.`Type_id` = 'TYPE_ID_SMALL_BUSINESS' OR `membergroup`.`Type_id` = 'TYPE_ID_MICRO_BUSINESS', 
			IF(`featureaction`.`id` in (", @organization_actions, "), 'true', 'false') , 'true') AS `isAllowed`,
        `featureaction`.`id` AS `Action_id`,
        IF(`featureaction`.`isAccountLevel` = '1', 'true', 'false') AS `isAccountLevel`,
        `feature`.`Status_id` AS `Feature_Status_id`,
        `feature`.`id` AS `Feature_id`,
        `membergroup`.`Type_id` AS `RoleType_id`
    FROM
        (`customergroup`
        LEFT JOIN `membergroup` ON (`membergroup`.`id` = `customergroup`.`Group_id`)
        LEFT JOIN `groupactionlimit` ON (`groupactionlimit`.`Group_id` = `customergroup`.`Group_id`)
        LEFT JOIN `featureaction` ON (`featureaction`.`id` = `groupactionlimit`.`Action_id`)
        LEFT JOIN `feature` ON (`feature`.`id` = `featureaction`.`Feature_id`))
	where `customergroup`.`Customer_id` =", quote(_customerId), " and `feature`.`Status_id` = 'SID_FEATURE_ACTIVE'");
    -- select @select_statement;
	PREPARE stmt FROM @select_statement; EXECUTE stmt; DEALLOCATE PREPARE stmt;
END$$
DELIMITER ;
